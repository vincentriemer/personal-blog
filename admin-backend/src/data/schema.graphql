input CreatePostInput {
  title: String!
  content: String!
  published_at: String
  clientMutationId: String!
}

type CreatePostPayload {
  viewer: User
  newPostEdge: PostEdge
  clientMutationId: String!
}

input DeletePostInput {
  postId: String!
  clientMutationId: String!
}

type DeletePostPayload {
  viewer: User
  deletedPostId: String
  clientMutationId: String!
}

type Mutation {
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  createPost(input: CreatePostInput!): CreatePostPayload
  deletePost(input: DeletePostInput!): DeletePostPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!
  created_at: String
  updated_at: String
  title: String
  content: String
  published_at: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]
}

type PostEdge {
  node: Post
  cursor: String!
}

type Query {
  node(id: ID!): Node
  viewer: User
}

input UpdatePostInput {
  id: String!
  title: String!
  content: String!
  published_at: String
  clientMutationId: String!
}

type UpdatePostPayload {
  post: Post
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  posts(before: String, after: String, first: Int, last: Int): PostConnection
}
